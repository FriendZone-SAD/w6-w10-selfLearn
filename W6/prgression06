‡∏ú‡∏°‡πÉ‡∏ä‡πâ chatgpt ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ gen ‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏°‡∏≤‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏ú‡∏°‡∏Å‡πá‡∏ó‡∏≥‡∏ï‡∏≤‡∏°‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤‡πÇ‡∏î‡∏¢‡∏ú‡∏°‡∏ö‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏≤

---

# üìù Self Practice Tasks (Functional Programming ‚Äì JavaScript)

### 1. First-Class & Higher-Order Functions

**Task:**
‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô `applyTwice(func, value)` ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤ ‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏≥‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ **2 ‡∏£‡∏≠‡∏ö**

```js
// Example
const double = x => x * 2
console.log(applyTwice(double, 5)) // 20
```

---

### 2. Declarative Code

**Task:**
‡πÉ‡∏´‡πâ array ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç `[3, 7, 10, 15, 20, 25]`

* ‡πÉ‡∏ä‡πâ **filter** ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ 5 ‡∏•‡∏á‡∏ï‡∏±‡∏ß
* ‡πÉ‡∏ä‡πâ **map** ‡∏¢‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏≠‡∏á‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
* ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå

---

### 3. Immutability

**Task:**
‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà

* ‡∏°‡∏µ array `[1, 2, 3, 4]`
* ‡∏™‡∏£‡πâ‡∏≤‡∏á array ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ö‡∏ß‡∏Å‡πÄ‡∏•‡∏Ç‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏î‡πâ‡∏ß‡∏¢ 10 (‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç array ‡πÄ‡∏Å‡πà‡∏≤)
* ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á array ‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞ array ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏≠‡∏Å‡∏°‡∏≤

---

### 4. Pure vs Impure Functions

**Task:**

* ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô **pure function** ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏ß‡∏Å 100
* ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô **impure function** ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global `count` ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å

---

### 5. Function Composition

**Task:**
‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô `compose(f, g)` ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô 2 ‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡πâ‡∏ß return ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏≤ `f(g(x))`

```js
// Example
const addOne = x => x + 1
const double = x => x * 2
const addOneThenDouble = compose(double, addOne)

console.log(addOneThenDouble(5)) // 12
```

---

### 6. Function Types

**Task:**
‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô 3 ‡πÅ‡∏ö‡∏ö

1. **Named function** ‚Üí `function add(a, b)`
2. **Anonymous function (expression)** ‚Üí `const sub = function(a, b)`
3. **Arrow function** ‚Üí `const mul = (a, b) =>`

---

### 7. Function Scope & Nested Functions

**Task:**
‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô `calculator(a, b)` ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡πà‡∏≠‡∏¢ 2 ‡∏ï‡∏±‡∏ß `add()` ‡πÅ‡∏•‡∏∞ `multiply()` ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô ‡πÅ‡∏•‡πâ‡∏ß return ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏ß‡∏Å‡πÅ‡∏•‡∏∞‡∏Ñ‡∏π‡∏ì

---

### 8. Closures

**Task:**
‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô `makeCounter()` ‡∏ó‡∏µ‡πà return ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô 2 ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏∑‡∏≠ `increment()` ‡πÅ‡∏•‡∏∞ `getValue()` ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ closure ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ count ‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ

```js
const c = makeCounter()
c.increment()  
c.increment()  
console.log(c.getValue()) // 2
```